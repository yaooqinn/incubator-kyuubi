#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Determine the current working directory
_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Preserve the calling directory
_CALLING_DIR="$(pwd)"
# Options used during compilation
_COMPILE_JVM_OPTS="-Xms2g -Xmx2g -XX:ReservedCodeCacheSize=1g -Xss128m"

if [ "$CI" ]; then
  export MAVEN_CLI_OPTS="-Dmvnd.minThreads=4 --no-transfer-progress --errors --fail-fast -Dstyle.color=always"
fi

# Installs any application tarball given a URL, the expected tarball name,
# and, optionally, a checkable binary path to determine if the binary has
# already been installed
## Arg1 - URL
## Arg2 - Tarball Name
## Arg3 - Checkable Binary
install_app() {
  local remote_tarball="$1/$2$4"
  local local_tarball="${_DIR}/$2"
  local binary="${_DIR}/$3"

  # setup `curl` and `wget` silent options if we're running on Jenkins
  local curl_opts="-L"
  local wget_opts=""
  curl_opts="--progress-bar ${curl_opts}"
  wget_opts="--progress=bar:force ${wget_opts}"

  if [ -z "$3" ] || [ ! -f "$binary" ]; then
    # check if we already have the tarball
    # check if we have curl installed
    # download application
    rm -f "$local_tarball"
    [ ! -f "${local_tarball}" ] && [ "$(command -v curl)" ] && \
      echo "exec: curl ${curl_opts} ${remote_tarball}" 1>&2 && \
      curl ${curl_opts} "${remote_tarball}" > "${local_tarball}"
    # if the file still doesn't exist, lets try `wget` and cross our fingers
    [ ! -f "${local_tarball}" ] && [ "$(command -v wget)" ] && \
      echo "exec: wget ${wget_opts} ${remote_tarball}" 1>&2 && \
      wget ${wget_opts} -O "${local_tarball}" "${remote_tarball}"
    # if both were unsuccessful, exit
    [ ! -f "${local_tarball}" ] && \
      echo -n "ERROR: Cannot download $2 with cURL or wget; " && \
      echo "please install manually and try again." && \
      exit 2
    cd "${_DIR}" && tar -xzf "$2"
    rm -rf "$local_tarball"
  fi
}

function get_os_type() {
  local unameOsOut=$(uname -s)
  local osType
  case "${unameOsOut}" in
  Linux*) osType=linux ;;
  Darwin*) osType=darwin ;;
  CYGWIN*) osType=windows ;;
  MINGW*) osType=windows ;;
  *) osType="UNKNOWN:${unameOsOut}" ;;
  esac
  echo "$osType"
}

function get_os_arch() {
  local unameArchOut="$(uname -m)"
  local arch
  case "${unameArchOut}" in
  x86_64*) arch=amd64 ;;
  arm64*) arch=aarch64 ;;
  *) arch="UNKNOWN:${unameOsOut}" ;;
  esac
  echo "$arch"
}

# Determine the Mvnd version from the root pom.xml file and
# install mvnd under the build/ folder if needed.
function install_mvnd() {
  local MVND_VERSION=$(grep "<mvnd.version>" "${_DIR}/../pom.xml" | head -n1 | awk -F '[<>]' '{print $3}')
  local MVN_VERSION=$(grep "<maven.version>" "${_DIR}/../pom.xml" | head -n1 | awk -F '[<>]' '{print $3}')
  MVND_BIN="$(command -v mvnd)"
  if [ "$MVND_BIN" ]; then
    local MVND_DETECTED_VERSION="$(mvnd -v 2>&1 | grep '(mvnd)' | awk '{print $5}')"
    local MVN_DETECTED_VERSION="$(mvnd -v 2>&1 | grep 'Apache Maven' | awk 'NR==2 {print $3}')"
  fi
  # See simple version normalization: http://stackoverflow.com/questions/16989598/bash-comparing-version-numbers
  function version { echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }'; }

  if [ $(version $MVND_DETECTED_VERSION) -ne $(version $MVND_VERSION) ]; then
    local APACHE_MIRROR=${APACHE_MIRROR:-'https://www.apache.org/dyn/closer.lua'}
    local MIRROR_URL_QUERY="?action=download"

    local OS_TYPE=$(get_os_type)
    local ARCH=$(get_os_arch)
    local MVND_TARBALL="maven-mvnd-${MVND_VERSION}-${OS_TYPE}-${ARCH}.tar.gz"
    # shellcheck disable=SC1009
    local FILE_PATH="maven/mvnd/${MVND_VERSION}"

    if [ $(command -v curl) ]; then
      if ! curl -L --output /dev/null --silent --head --fail "${APACHE_MIRROR}/${FILE_PATH}/${MVND_TARBALL}${MIRROR_URL_QUERY}" ; then
        # Fall back to archive.apache.org for older Maven
        echo "Falling back to archive.apache.org to download Maven"
        APACHE_MIRROR="https://archive.apache.org/dist"
        MIRROR_URL_QUERY=""
      fi
    fi

    local MVND_BIN_NEW="maven-mvnd-${MVND_VERSION}-${OS_TYPE}-${ARCH}/bin/mvnd"

    install_app \
      "${APACHE_MIRROR}/${FILE_PATH}" \
      "${MVND_TARBALL}" \
      "${MVND_BIN_NEW}" \
      "${MIRROR_URL_QUERY}"

    MVND_BIN="${_DIR}${MVND_BIN_NEW}"
  else
    if [ "$(version $MVN_DETECTED_VERSION)" -ne "$(version $MVN_VERSION)" ]; then
      echo "Mvnd $MVND_DETECTED_VERSION embedded maven version $MVN_DETECTED_VERSION is not equivalent to $MVN_VERSION required in pom."
      exit 1
    fi
  fi
}

install_mvnd

cd "${_CALLING_DIR}"

# Set any `mvn` options if not already present
export MAVEN_OPTS=${MAVEN_OPTS:-"$_COMPILE_JVM_OPTS"}

echo "Using \`mvnd\` from path: $MVND_BIN" 1>&2

if [ "$MAVEN_CLI_OPTS" != "" ]; then
  echo "MAVEN_CLI_OPTS=$MAVEN_CLI_OPTS"
fi

${MVND_BIN} $MAVEN_CLI_OPTS "$@"
